#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 256) in;

struct Vertex
{
    vec3 pos;
    float pad1;
    vec4 speed;
};

// Binding 0 : Position of point in Galaxy, input
layout(std140, binding = 0) buffer Positions
{
    Vertex positions[ ];
};

// Binding 1: Acceleration storage buffer, input
layout(std140, binding = 1) buffer Accelerations
{
    vec4 accelerations[ ];
}; 

// Binding 2: Option uniform buffer.
layout(binding = 2) uniform Options {
    float BlackHoleMass;
    float InteractionRate;
    float SmoothLength;
    uint NbPoints;
} options;


float Norm2(vec3 vector)
{
	return pow(vector.x, 2) + pow(vector.y, 2) + pow(vector.z, 2);
}


void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index >= options.NbPoints)
        return;

    vec3 acc = vec3(0,0,0);
    vec3 pos =  positions[index].pos;
    float max = options.InteractionRate * options.NbPoints;
    for(int i = 0; i < max ; ++i)
    {
        vec3 other = positions[i].pos;
        if(isnan(other.x) ||isnan(other.y) || isnan(other.z))
                continue;
        if (i == index)
            continue;
            
        vec3 vector = other - pos;
        float norm = Norm2(vector) + options.SmoothLength ;
        if(norm == 0)
            continue;
        acc += (normalize(vector) / norm) / options.InteractionRate;
    }
    
    float normPos = Norm2(positions[index].pos) + options.SmoothLength;
    if(normPos != 0)
        acc += (options.BlackHoleMass * normalize(-positions[index].pos)) / normPos;
    
    accelerations[index] = vec4(acc,0);
}