#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 256) in;

struct Vertex
{
    vec3 pos;
    float pad1;
    vec3 color;
    int pad2;
};


// Binding 0 : Position of point in Galaxy, output
layout(std140, binding = 0) buffer Positions
{
    Vertex positions[ ];
};

// Binding 1: Acceleration storage buffer, input
layout(std140, binding = 1) buffer Accelerations
{
    vec4 accelerations[ ];
};

// Binding 2: Speed storage buffer, input
layout(std140, binding = 2) buffer Speeds
{
    vec4 speeds[ ];
};

// Binding 2: Option uniform buffer.
layout(binding = 3) uniform Options {
    float Step;
    uint NbPoints;
} options;


void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index >= options.NbPoints)
        return;
    
    speeds[index] += options.Step * accelerations[index];
    positions[index].pos += options.Step * speeds[index].xyz;
}